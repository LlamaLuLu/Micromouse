% Autogenerated file: Mon Sep  1 17:38:16 2025
function writeCodeInfoFcn


% Load a ComponentInterface object from IR
codeIRInfoStruct = load('tlc\codeIRInfo.mat');
codeInfo = codeIRInfoStruct.codeInfo;



wr = coder.internal.writeDataInterfacesToCodeDescriptor("MicroMouse_Deploy",pwd);
wr.writeName(codeInfo.Name);
% Need to call componentInterface 'getParameters' before deleting any Parameter DataInterfaces to avoid crash.
wr.fFullModel.componentInterface.Parameters;

    
    
    

    

    skippedParametersInterfaceInfo = [];
    skippedParametersIndex = [];
    
    
                
            
            
            
            
            

    




















































































                        tmpArgs         = [];
    tmpActualArgs   = [];
    tmpRet          = coder.descriptor.types.Argument.empty;
    tmpActualReturn = coder.descriptor.DataInterface.empty;


    func_Initialize_Prototype = coder.descriptor.types.Prototype(wr.fMF0Model);
            addValuesToSequence(func_Initialize_Prototype.Arguments, tmpArgs);

    func_Initialize_Prototype.Return     = tmpRet;

        func_Initialize_Prototype.HeaderFile = 'MicroMouse_Deploy.h';
    func_Initialize_Prototype.SourceFile = 'MicroMouse_Deploy.c';

    func_Initialize_Interface = coder.descriptor.FunctionInterface(wr.fMF0Model);
    func_Initialize_Interface.Prototype    = func_Initialize_Prototype;
            addValuesToSequence(func_Initialize_Interface.ActualArgs, tmpActualArgs);

    func_Initialize_Interface.ActualReturn = tmpActualReturn;

        func_Initialize_Prototype.Name = 'MicroMouse_Deploy_initialize';
    time_initialize = wr.fFullModel.componentInterface.TimingProperties(getIndexFromTimingInternalId(wr.fFullModel.componentInterface.TimingInternalIds, -1));
        func_Initialize_Interface.Timing = time_initialize;
                addValuesToSequence(wr.fFullModel.componentInterface.InitializeFunctions, func_Initialize_Interface');

        func_Initialize_Interface.IsInitializeFunction = true;

                                tmpArgs         = [];
    tmpActualArgs   = [];
    tmpRet          = coder.descriptor.types.Argument.empty;
    tmpActualReturn = coder.descriptor.DataInterface.empty;


            





    func_UpdateContStates_Prototype = coder.descriptor.types.Prototype(wr.fMF0Model);
            addValuesToSequence(func_UpdateContStates_Prototype.Arguments, tmpArgs);

    func_UpdateContStates_Prototype.Return     = tmpRet;

        func_UpdateContStates_Prototype.HeaderFile = 'MicroMouse_Deploy.h';
    func_UpdateContStates_Prototype.SourceFile = 'MicroMouse_Deploy.c';

    func_UpdateContStates_Interface = coder.descriptor.FunctionInterface(wr.fMF0Model);
    func_UpdateContStates_Interface.Prototype    = func_UpdateContStates_Prototype;
            addValuesToSequence(func_UpdateContStates_Interface.ActualArgs, tmpActualArgs);

    func_UpdateContStates_Interface.ActualReturn = tmpActualReturn;

    time_1 = wr.fFullModel.componentInterface.TimingProperties(getIndexFromTimingInternalId(wr.fFullModel.componentInterface.TimingInternalIds, 1));
        func_UpdateContStates_Interface.Timing = time_1;
            func_UpdateContStates_Prototype.Name = 'MicroMouse_Deploy_step';
                    addValuesToSequence(wr.fFullModel.componentInterface.OutputFunctions, func_UpdateContStates_Interface');


                        
                    


                    tmpArgs         = [];
    tmpActualArgs   = [];
    tmpRet          = coder.descriptor.types.Argument.empty;
    tmpActualReturn = coder.descriptor.DataInterface.empty;


    func_Terminate_Prototype = coder.descriptor.types.Prototype(wr.fMF0Model);
            addValuesToSequence(func_Terminate_Prototype.Arguments, tmpArgs);

    func_Terminate_Prototype.Return     = tmpRet;

        func_Terminate_Prototype.HeaderFile = 'MicroMouse_Deploy.h';
    func_Terminate_Prototype.SourceFile = 'MicroMouse_Deploy.c';

    func_Terminate_Interface = coder.descriptor.FunctionInterface(wr.fMF0Model);
    func_Terminate_Interface.Prototype    = func_Terminate_Prototype;
            addValuesToSequence(func_Terminate_Interface.ActualArgs, tmpActualArgs);

    func_Terminate_Interface.ActualReturn = tmpActualReturn;

    time_terminate = wr.fFullModel.componentInterface.TimingProperties(getIndexFromTimingInternalId(wr.fFullModel.componentInterface.TimingInternalIds, -1));
        func_Terminate_Interface.Timing = time_terminate;
                func_Terminate_Prototype.Name = ['MicroMouse_Deploy_terminate'];
                addValuesToSequence(wr.fFullModel.componentInterface.TerminateFunctions, func_Terminate_Interface');



        

    

            % Opaque Data Type
            type_RTModel = coder.descriptor.types.Opaque(wr.fMF0Model);
            type_RTModel.Identifier = 'RT_MODEL_MicroMouse_Deploy_T';
            

        % Pointer Type: Pointer to type_RTModel
        CodeDescPtrtype_RTModel_1_0 = coder.descriptor.types.Pointer(wr.fMF0Model);
            CodeDescPtrtype_RTModel_1_0.BaseType = type_RTModel;
        CodeDescPtrtype_RTModel_1_0.ReadOnly = 1;
        CodeDescPtrtype_RTModel_1_0.Volatile = 0;
        





        % Variable: CoderDescVar_RTModel
        CoderDescVar_RTModel = coder.descriptor.Variable(wr.fMF0Model);
        CoderDescVar_RTModel.Identifier = 'MicroMouse_Deploy_M_';
        CoderDescVar_RTModel.Type = CodeDescPtrtype_RTModel_1_0.BaseType;
        CoderDescVar_RTModel.VarOwner = 'MicroMouse_Deploy';
            
            CoderDescVar_RTModel.DeclarationFile = 'MicroMouse_Deploy.h';
            CoderDescVar_RTModel.DefinitionFile  = 'MicroMouse_Deploy.c';


        % Pointer Variable: CodeDescPtrVar_RTModel

            CodeDescPtrVar_RTModel = coder.descriptor.PointerVariable(wr.fMF0Model);
            CodeDescPtrVar_RTModel.Type = CodeDescPtrtype_RTModel_1_0;
            CodeDescPtrVar_RTModel.Identifier      = 'MicroMouse_Deploy_M';
            CodeDescPtrVar_RTModel.TargetVariable = CoderDescVar_RTModel;
            
        CodeDescPtrVar_RTModel.VarOwner = 'MicroMouse_Deploy';
            CodeDescPtrVar_RTModel.DeclarationFile = 'MicroMouse_Deploy.h';
            CodeDescPtrVar_RTModel.DefinitionFile = 'MicroMouse_Deploy.c';
        % Data Interface: CodeDesc_idata_RTModel
            empty_timing = coder.descriptor.TimingInterface.empty;
                CodeDesc_idata_RTModel = coder.descriptor.DataInterface(wr.fMF0Model);
        CodeDesc_idata_RTModel.SID = '';
        CodeDesc_idata_RTModel.GraphicalName = 'RTModel';
        CodeDesc_idata_RTModel.Implementation = CodeDescPtrVar_RTModel;
        CodeDesc_idata_RTModel.Timing = empty_timing;

        


    

    
    
    

    





































            wr.removeSkippedParameters(skippedParametersInterfaceInfo);

                wr.addInternalData(CodeDesc_idata_RTModel);


    
    
    

    

    
    
                        tmpArgs         = [];
    tmpActualArgs   = [];
    tmpRet          = coder.types.Argument.empty;
    tmpActualReturn = RTW.DataInterface.empty;


    func_Initialize_Prototype = coder.types.Prototype;
            func_Initialize_Prototype.Arguments = [func_Initialize_Prototype.Arguments tmpArgs];

    func_Initialize_Prototype.Return     = tmpRet;

        func_Initialize_Prototype.HeaderFile = 'MicroMouse_Deploy.h';
    func_Initialize_Prototype.SourceFile = 'MicroMouse_Deploy.c';

    func_Initialize_Interface = RTW.FunctionInterface;
    func_Initialize_Interface.Prototype    = func_Initialize_Prototype;
            func_Initialize_Interface.ActualArgs = [func_Initialize_Interface.ActualArgs tmpActualArgs];

    func_Initialize_Interface.ActualReturn = tmpActualReturn;

        func_Initialize_Prototype.Name = 'MicroMouse_Deploy_initialize';
    time_initialize = codeInfo.TimingProperties(getIndexFromTimingInternalId(codeInfo.TimingInternalIds, -1));
        func_Initialize_Interface.Timing = time_initialize;
                codeInfo.InitializeFunctions = [codeInfo.InitializeFunctions func_Initialize_Interface'];

        func_Initialize_Interface.IsInitializeFunction = true;

                                tmpArgs         = [];
    tmpActualArgs   = [];
    tmpRet          = coder.types.Argument.empty;
    tmpActualReturn = RTW.DataInterface.empty;


            





    func_UpdateContStates_Prototype = coder.types.Prototype;
            func_UpdateContStates_Prototype.Arguments = [func_UpdateContStates_Prototype.Arguments tmpArgs];

    func_UpdateContStates_Prototype.Return     = tmpRet;

        func_UpdateContStates_Prototype.HeaderFile = 'MicroMouse_Deploy.h';
    func_UpdateContStates_Prototype.SourceFile = 'MicroMouse_Deploy.c';

    func_UpdateContStates_Interface = RTW.FunctionInterface;
    func_UpdateContStates_Interface.Prototype    = func_UpdateContStates_Prototype;
            func_UpdateContStates_Interface.ActualArgs = [func_UpdateContStates_Interface.ActualArgs tmpActualArgs];

    func_UpdateContStates_Interface.ActualReturn = tmpActualReturn;

    time_1 = codeInfo.TimingProperties(getIndexFromTimingInternalId(codeInfo.TimingInternalIds, 1));
        func_UpdateContStates_Interface.Timing = time_1;
            func_UpdateContStates_Prototype.Name = 'MicroMouse_Deploy_step';
                    codeInfo.OutputFunctions = [codeInfo.OutputFunctions func_UpdateContStates_Interface'];


                        
                    


                    tmpArgs         = [];
    tmpActualArgs   = [];
    tmpRet          = coder.types.Argument.empty;
    tmpActualReturn = RTW.DataInterface.empty;


    func_Terminate_Prototype = coder.types.Prototype;
            func_Terminate_Prototype.Arguments = [func_Terminate_Prototype.Arguments tmpArgs];

    func_Terminate_Prototype.Return     = tmpRet;

        func_Terminate_Prototype.HeaderFile = 'MicroMouse_Deploy.h';
    func_Terminate_Prototype.SourceFile = 'MicroMouse_Deploy.c';

    func_Terminate_Interface = RTW.FunctionInterface;
    func_Terminate_Interface.Prototype    = func_Terminate_Prototype;
            func_Terminate_Interface.ActualArgs = [func_Terminate_Interface.ActualArgs tmpActualArgs];

    func_Terminate_Interface.ActualReturn = tmpActualReturn;

    time_terminate = codeInfo.TimingProperties(getIndexFromTimingInternalId(codeInfo.TimingInternalIds, -1));
        func_Terminate_Interface.Timing = time_terminate;
                func_Terminate_Prototype.Name = ['MicroMouse_Deploy_terminate'];
                codeInfo.TerminateFunctions = [codeInfo.TerminateFunctions func_Terminate_Interface'];



        

    

            % Opaque Data Type
            type_RTModel = coder.types.Opaque;
            type_RTModel.Identifier = 'RT_MODEL_MicroMouse_Deploy_T';
            

        % Pointer Type: Pointer to type_RTModel
        Ptrtype_RTModel_1_0 = coder.types.Pointer;
            Ptrtype_RTModel_1_0.BaseType = type_RTModel;
        Ptrtype_RTModel_1_0.ReadOnly = 1;
        Ptrtype_RTModel_1_0.Volatile = 0;
        





        % Variable: Var_RTModel
        Var_RTModel = RTW.Variable;
        Var_RTModel.Identifier = 'MicroMouse_Deploy_M_';
        Var_RTModel.Type = Ptrtype_RTModel_1_0.BaseType;
        Var_RTModel.Owner = 'MicroMouse_Deploy';
            
            Var_RTModel.DeclarationFile = 'MicroMouse_Deploy.h';
            Var_RTModel.DefinitionFile  = 'MicroMouse_Deploy.c';


        % Pointer Variable: PtrVar_RTModel

            PtrVar_RTModel = RTW.PointerVariable(Ptrtype_RTModel_1_0, 'MicroMouse_Deploy_M', Var_RTModel);
            
        PtrVar_RTModel.Owner = 'MicroMouse_Deploy';
            PtrVar_RTModel.DeclarationFile = 'MicroMouse_Deploy.h';
            PtrVar_RTModel.DefinitionFile = 'MicroMouse_Deploy.c';
        % Data Interface: idata_RTModel
            empty_timing = RTW.TimingInterface.empty;
                idata_RTModel = RTW.DataInterface('', 'RTModel', PtrVar_RTModel, empty_timing);

        


    

    
            if ~isempty(skippedParametersIndex)
        codeInfo.Parameters(skippedParametersIndex) = [];
        end

                        codeInfo.InternalData = [codeInfo.InternalData idata_RTModel];



% Handling Right-Click Builds
ss = rtwprivate('getSourceSubsystemHandle',codeInfo.GraphicalPath);
% Check if Rt-Click build, then re-map SIDs
wr.commitAndBeginNewTransaction();
if ~isempty(ss) && rtwprivate('rtwattic','hasSIDMap')
wr.fFullModel.componentInterface = modifyCodeInfoForSubsystemBuild(ss, wr.fFullModel.componentInterface);
codeInfo = modifyCodeInfoForSubsystemBuild(ss, codeInfo);
end

wr.writeDataInterfacesLate();
wr.fixUpInternalDataAndUpdateLate();








wr.closeRepo();

    if exist('expInports', 'var')
    save codeInfo.mat codeInfo expInports;
    else
    save codeInfo.mat codeInfo;
    end
returnVal = 1;

% End Function: writeCodeInfoFcn

function idx = findArrayValueIdx(internalIdVec, internalId)
if isa(internalIdVec, 'mf.zero.PrimitiveSequence')
idx = find(internalIdVec.toArray == internalId);
else
idx = find(internalIdVec == internalId);
end

function arraySize = getArrayOrSequenceSize(arrayOrSequence)
if isa(arrayOrSequence, 'mf.zero.Sequence')
arraySize = length(arrayOrSequence.toArray);
return;
end
arraySize = length(arrayOrSequence);

function data = uniquifyDataAccess(list)
data = [];
for idx=1:getArrayOrSequenceSize(list)
if ~isPresentDI(data, list(idx)) %#ok<AGROW>
if isempty(data)
data = list(idx);
else
data(end+1) = list(idx);
end
end
end
% End Function: uniquifyDataAccess

function isPresent = isPresentDI(list, di)
isPresent = false;
for idx = 1:numel(list)
if isequal(list(idx), di)
isPresent = true;
break
end
end

function idx = getIndexFromTimingInternalId(internalIdVec, internalId)
idx = findArrayValueIdx(internalIdVec, internalId);
if (isempty(idx) || (length(idx) > 1))
ciMsg = 'Time object cannot be empty';
ciExc = MException('RTW:buildProcess:CodeInfoInternalError',ciMsg);
throw(ciExc);
end
% End Function: getIndexFromTimingInternalId

function checkDataGraphicalNames(ciName, rtwName)
if (startsWith(ciName, 'BlockParam:'))
tokens = split(ciName, ':');
ciName = tokens{2};
end
if (strcmp(ciName, rtwName) ~= 1)
ciMsg = ['Name mismatch: ', ciName, ' and ', rtwName];
ciExc = MException('RTW:buildProcess:CodeInfoInternalError',ciMsg);
throw(ciExc);
end
% End Function: checkDataGraphicalNames

function iData = getInternalDataByName(iDataVec, iDataName)
if isa(iDataVec, 'mf.zero.Sequence')
iData = coder.descriptor.DataInterface.empty;
iDataVec = iDataVec.toArray;
else
iData = RTW.DataInterface.empty;
end
for idxData = 1:numel(iDataVec)
if strcmp(iDataName, iDataVec(idxData).GraphicalName)
iData(end+1) = iDataVec(idxData);
break
end
end
if (isempty(iData) || (length(iData) > 1))
ciMsg = 'Internal Data object cannot be empty';
ciExc = MException('RTW:buildProcess:CodeInfoInternalError',ciMsg);
throw(ciExc);
end
% End Function: getInternalDataByName

function iData = getInternalDataByVariableName(iDataVec, iDataVariableName)
if isa(iDataVec, 'mf.zero.Sequence')
iData = coder.descriptor.DataInterface.empty;
iDataVec = iDataVec.toArray;
else
iData = RTW.DataInterface.empty;
end
for idxData = 1:numel(iDataVec)
if strcmp(iDataVariableName, iDataVec(idxData).Implementation.VariableName)
iData = iDataVec(idxData);
break
end
end
if isempty(iData)
ciMsg = 'Internal Data object cannot be empty';
ciExc = MException('RTW:buildProcess:CodeInfoInternalError',ciMsg);
throw(ciExc);
end
% End Function: getInternalDataByVariableName

function addValuesToSequence(aSequence, aValues)
for idx = 1:getArrayOrSequenceSize(aValues)
aSequence.add(aValues(idx));
end

function componentInterface = modifyCodeInfoForSubsystemBuild(ss, componentInterface)
    % Extract Subsystem Build Map from AtticData
    Subsystem_Build_Mapping = rtwprivate('rtwattic','getSIDMap');

    % Parameters
    for i = 1:getArrayOrSequenceSize(componentInterface.Parameters)
    sid = componentInterface.Parameters(i).SID;

    componentInterface.Parameters(i).SID = Simulink.ID.getSubsystemBuildSID(sid, ss, Subsystem_Build_Mapping);
    end

    % Data Stores
    for i = 1:getArrayOrSequenceSize(componentInterface.DataStores)
    sid = componentInterface.DataStores(i).SID;

    componentInterface.DataStores(i).SID = Simulink.ID.getSubsystemBuildSID(sid,ss, Subsystem_Build_Mapping);
    end

    % Inports
    for i = 1:getArrayOrSequenceSize(componentInterface.Inports)
    sid = componentInterface.Inports(i).SID;

    componentInterface.Inports(i).SID = Simulink.ID.getSubsystemBuildSID(sid,ss, Subsystem_Build_Mapping);
    end

    % Outports
    for i = 1:getArrayOrSequenceSize(componentInterface.Outports)
    sid = componentInterface.Outports(i).SID;

    componentInterface.Outports(i).SID = Simulink.ID.getSubsystemBuildSID(sid,ss, Subsystem_Build_Mapping);
    end

